

const { Component } = require("preact");

require("./index.scss");

const store = require("base/app/edit/store");
const render = require("./index.jsx");


const conf = {
    closeRatio: 5
};


module.exports = class Drawer extends Component{

    constructor(props){

        super(props);

        this.horizontal = this.props.side === "left" || this.props.side === "right";

    }

    getDerivedStateFromProps(nextProps){

        document.documentElement.classList[nextProps.open ? "add" : "remove"]("drawer-open");

        const block = (evt) => {

            let isTouchMoveAllowed = true;
            let target = evt.currentTarget;

            // Makes sense to use a while loop here.
            // eslint-disable-next-line no-loops/no-loops
            while(target !== null){

                if(
                    target.classList &&
                    target.classList.contains("drawer-open")
                ){

                    isTouchMoveAllowed = false;

                    break;

                }

                target = target.parentNode;

            }

            if(!isTouchMoveAllowed){
                evt.preventDefault();
            }

        };

        if(nextProps.open){
            document.documentElement.addEventListener("touchmove", block);
        }else{
            document.documentElement.removeEventListener("touchmove", block);
        }

    }

    componentDidMount(){

        this.elWrap = this.base.querySelector(".wrap");
        this.elToggle = this.base.querySelector(".close");

        this.onTouchStart = this.onTouchStart.bind(this);
        this.onTouchMove = this.onTouchMove.bind(this);
        this.onTouchEnd = this.onTouchEnd.bind(this);
        this.touchUpdate = this.touchUpdate.bind(this);
        this.toggle = this.toggle.bind(this);
        this.block = this.block.bind(this);

        this.elWrap.addEventListener("touchstart", this.onTouchStart, Modernizr.passiveeventlisteners ? { passive: true } : false);
        this.elWrap.addEventListener("touchmove", this.onTouchMove, Modernizr.passiveeventlisteners ? { passive: true } : false);
        this.elWrap.addEventListener("touchend", this.onTouchEnd);

        this.base.addEventListener("click", this.toggle);
        this.elToggle.addEventListener("click", this.toggle);
        this.elWrap.addEventListener("click", this.block);

    }

    componentWillUnmount(){

        this.elWrap.removeEventListener("touchstart", this.onTouchStart);
        this.elWrap.removeEventListener("touchmove", this.onTouchMove);
        this.elWrap.removeEventListener("touchend", this.onTouchEnd);

        this.base.removeEventListener("click", this.toggle);
        this.elToggle.removeEventListener("click", this.toggle);
        this.elWrap.removeEventListener("click", this.block);

    }

    block(evt){

        evt.stopPropagation();

    }

    getTranslateX(){

        if(this.props.side === "left"){
            return Math.min(0, this.state.touchCurrentX - this.touchStartX);
        }

        return Math.min(0, this.touchStartX - this.state.touchCurrentX) * -1;

    }

    getTranslateY(){

        if(this.props.side === "top"){
            return Math.min(0, this.touchCurrentY - this.touchStartY);
        }

        return Math.min(0, this.touchStartY - this.touchCurrentY) * -1;

    }

    onTouchEnd(){

        if(!this.touching){
            return;
        }

        this.touching = false;

        const translate = this[this.horizontal ? "getTranslateX" : "getTranslateY"]();

        this.elWrap.style.transform = "";

        const trigger = (() => {

            if(this.horizontal){

                return translate * (this.props.side === "left" ? -1 : 1) > this.touchStartWidth / conf.closeRatio;

            }

            return translate * (this.props.side === "top" ? -1 : 1) > this.touchStartHeight / conf.closeRatio;

        })();

        store.dispatch({
            id: this.props.id,
            open: !trigger,
            type: "SET_DRAWER"
        });

    }

    onTouchMove(evt){

        if(!this.touching){
            return;
        }

        if(this.horizontal){
            this.state.touchCurrentX = evt.touches[0].pageX;
        }else{
            this.touchCurrentY = evt.touches[0].pageY;
        }

    }

    onTouchStart(evt){

        if(this.base.getAttribute("open") === null){
            return;
        }

        if(this.horizontal){

            this.touchStartX = evt.touches[0].pageX;
            this.state.touchCurrentX = this.touchStartX;
            this.touchStartWidth = this.elWrap.offsetWidth;

        }else{

            this.touchStartY = evt.touches[0].pageY;
            this.touchCurrentY = this.touchStartY;
            this.touchStartHeight = this.elWrap.offsetHeight;

        }

        this.touching = true;

        requestAnimationFrame(this.touchUpdate);

    }

    touchUpdate(){

        if(!this.touching){
            return;
        }

        requestAnimationFrame(this.touchUpdate);

        this.elWrap.style.transform = (() => {

            if(this.horizontal){
                return `translate3d(${ this.getTranslateX() }px, 0, 0)`;
            }

            return `translate3d(0, ${ this.getTranslateY() }px, 0)`;

        })();

    }

    toggle(){

        store.dispatch({
            id: this.props.id,
            type: "TOGGLE_DRAWER"
        });

    }

    public render(props): JSX.Element{

        return (
            <sidebar
                className="drawer"
                id={ props.id }
                open={ props.open }
                side={ props.side }
            >
                <div className="wrap">
                    <div className="content-wrap">
                        <div className="edge">
                            <a className="close">
                                <span>&times;</span>
                            </a>
                        </div>
                        <div className="content">
                            { this.content() }
                            { props.children }
                        </div>
                    </div>
                </div>
            </sidebar>
        );

    }

};
